package com.kvk.dp.errorhandlingtool;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import org.apache.log4j.Logger;
import org.custommonkey.xmlunit.exceptions.XpathException;

import com.ibm.db2.jcc.am.Connection;
import com.ibm.mq.MQException;
import com.kvk.dp.errorhandlingtool.jaxb.Header;

/*
This tool does the following
* - gets the messages from the DP.ERRORHANDLING.LQ1 queue
* - it will persist the message in the DP_ERRORMESSAGE table
* - based on the value in the errormessage (header: kvk-dp-meta:retry-policyid) it will create 1 or more records in 
* 		the DP.ERRORHANDLING.LQ01 table, for eg if kvk-dp-meta:retry-policyid = 1, in the DP_ERRORHANDLING_RETRYTYPES table it
* 		says that RETRYPOLICY #1, has 3 retries with an interval of 60 seconds, if the time of enterance is 12:00 it will
* 		enter the following data in the DP.ERRORHANDLING.LQ01 table:
* 		ERROR_HANDLING_ID 	--> a unique nr (sequence)
* 		MESSAGE_ID			--> The msgID from the message (reference to the DP_ERRORMESSAGE table)
* 		RETRY_ID			--> The retry policy ID (from the kvk-dp-meta:retry-policyid) reference to the DP_ERRORHANDLING_RETRYTYPES table
* 		RETRY_ENDPOINT		--> The url where the message should be posted (from the kvk-dp-meta:retry-endpoint)
* 		RETRY_DATE			-->	calculated date based on the example 3 records will be made with the following times
* 									TODAYS DATE-12:01
* 									TODAYS DATE-12:02
* 									TODAYS DATE-12:03
* 		STATUS				-->	Per attempt an OK or NOT OK will be entered here, this is needed for the cleanup
*/

public class DpErrorHandlingTool extends Thread implements DpErrorHandlingVariables {

	static Logger log = Logger.getLogger(DpErrorHandlingTool.class.getName());

	// miliz ==> 60.000 is 1 minute
	private static long SLEEP_TIME = 60000;
	private int iteration_counter = 0;
	

	private Connection conn = null;
	private static boolean initialized = false;


	private static DpErrorHandlingTool dpc = null;
	private static DpMQMessageTool dpMessageTool = new DpMQMessageTool();
	private List<String> retryStatusMap = new ArrayList<String>();
	
	
	
	
	private void init() throws ClassNotFoundException, SQLException {

		log.info("Initializing DATABASE");
		
		
		if (conn != null && !conn.isClosed())
			conn.close();

		Class.forName("com.ibm.db2.jcc.DB2Driver");
		conn = (Connection) DriverManager.getConnection(db_url, db_user, db_pwd);
		initialized = true;
	}

	private DpMessage createDpMessage(String message) throws JAXBException,
			UnsupportedEncodingException, XMLStreamException {
		DpMessage dpMessage = new DpMessage();
		XMLInputFactory xif = XMLInputFactory.newFactory();
		InputStream xmlInputStream = new ByteArrayInputStream(
				message.getBytes("UTF-8"));
		XMLStreamReader xsr = xif.createXMLStreamReader(xmlInputStream);
		xsr.nextTag(); // Advance to Envelope tag
		xsr.nextTag(); // Advance to Header tag

		JAXBContext jc = JAXBContext.newInstance(Header.class);
		Unmarshaller unmarshaller = jc.createUnmarshaller();
		JAXBElement<Header> je = unmarshaller.unmarshal(xsr, Header.class);

		String retentionId = je.getValue().getRetentionID() == null ? "1" : je.getValue().getRetentionID().trim();
		String messageId = je.getValue().getMessageID() == null ? "NO_ID" : je.getValue().getMessageID().trim();
		dpMessage.setRetentionId(retentionId);
		dpMessage.setXmlMessageId(messageId);
		dpMessage.setXmlMessage(message);

		return dpMessage;
	}

	// TODO: Make user of Connection pool mechanism (for e.g. C3PO)
	public void persistMessageInDatabase(DpMessage dpMessage) throws ClassNotFoundException, SQLException, XpathException,
																			UnsupportedEncodingException, JAXBException, XMLStreamException {
		String query = "insert into datapower.dp_messages (message_id,message,message_type,message_date) values (?,?,?,current timestamp)";
		if (log.isDebugEnabled()) {
			log.debug("persisting message in db with following query : ");
			log.debug(query);
			log.debug(" arg 1: " + dpMessage.getXmlMessageId());
			//log.debug(" arg 2: " + dpMessage.getXmlMessage());
			log.debug(" arg 3: " + dpMessage.getRetentionId());
		}

		if (!initialized || conn == null || (conn != null && conn.isClosed())) {
			try {
				init();
			} catch (Exception ex) {
				throw new SQLException("Exception during database initialization: "+ ex.toString());
			}
		}

		// prepare the statement
		PreparedStatement insertStmt = conn.prepareStatement(query);
		insertStmt.setString(1, dpMessage.getXmlMessageId());
		insertStmt.setString(2, dpMessage.getXmlMessage());
		insertStmt.setString(3, dpMessage.getRetentionId());

		// execute the statement
		if (insertStmt.executeUpdate() != 1) {
			log.info("No record inserted.");
		}
	}

	public static void main(String[] args) {
		dpc = new DpErrorHandlingTool();
		dpc.run();
	}

	public void run() {
		try {
			while (true) {
				//	This should run every 5 minutes
				if(iteration_counter>3){
					dpc.iterateOverMessages(QueueType.RETRY);
					iteration_counter = 0;
					sleep(SLEEP_TIME);
				}else{
					dpc.iterateOverMessages(QueueType.NORMAL);
					sleep(SLEEP_TIME);
				}
				iteration_counter++;
			}
		} catch (InterruptedException e) {
			log.info(DpErrorHandlingTool.class.getName()	+ " application interupted....");
		}catch(Exception e){
			log.error(DpErrorHandlingTool.class.getName()	+ " General exception occured, application crash....");
			e.printStackTrace();
		} finally {
			dpc.closeConnection();
			dpMessageTool.closeConnection();
		}
	}

	private void iterateOverMessages(QueueType qType) throws JAXBException, XMLStreamException {
		String message = null;
		DpMessage dpMessage = null;
		List<String> allMessagesToBeHandled = null;
		try {
			
			//	Getting all the messages from the queue
			try {
				//	Handle the ERROR Messages --> readErrorQueue() ...or not!
				if(qType.equals(QueueType.RETRY))
					allMessagesToBeHandled = dpMessageTool.readErrorRetryQueue();
				if(qType.equals(QueueType.NORMAL))
					allMessagesToBeHandled = dpMessageTool.readQueue();
			} catch (MQException mex) {
				log.error("MQException getting messages from queue: "+ mex.getMessage());
			}
			
			//	Iterating over the messages
			for (int i = 0; i < allMessagesToBeHandled.size(); i++) {
				message = allMessagesToBeHandled.get(i);
				try {
					dpMessage = createDpMessage(message);
					dpc.persistMessageInDatabase(dpMessage);
				} catch (JAXBException e) {
					throw new Exception("Exception during JAXB creation: "+ e.getMessage());
				}
			}
		} catch (SQLException ex) {
			try{
				retryStatusMap.add(new String(dpMessage.getXmlMessageId()));
				int occurrences = Collections.frequency(retryStatusMap, dpMessage.getXmlMessageId());
				log.debug(dpMessage.getXmlMessageId()+" occurs: "+occurrences+" times in retryStatusMap");
				if(occurrences>=max_retry_times){
					Iterator<String> iterator = retryStatusMap.iterator();
					log.error("putting message with ID: " + dpMessage.getXmlMessageId()+ " in ERROR Q, exception was: "+ ex.getMessage());
					
					writeAllMessagesInQueue(allMessagesToBeHandled,QueueType.ERROR,dpMessage.getXmlMessageId());
					while(iterator.hasNext()){
						if(iterator.next() == dpMessage.getXmlMessageId())
							retryStatusMap.remove(dpMessage.getXmlMessageId());
					}
				}else{
					log.error("putting message with ID: " + dpMessage.getXmlMessageId()+ " in error Retry Q, exception was: "+ ex.getMessage());
					writeAllMessagesInQueue(allMessagesToBeHandled,QueueType.RETRY,dpMessage.getXmlMessageId());
				}
			} catch (MQException e) {
				log.error("MQ Exception : + writing message to Queue for message with id "+dpMessage.getXmlMessageId()+" msg: "+e.getMessage() );
			} catch (IOException e) {
				log.error("IO Exception : + writing message to Queue for message with id "+dpMessage.getXmlMessageId()+" msg: "+e.getMessage() );
			}
		}catch(Exception ex){
			log.error("No SQL exception for : " + dpMessage.getXmlMessageId()+ " wrong message? putting in ERROR Q, exception was: "+ ex.getMessage());
			try{
				writeAllMessagesInQueue(allMessagesToBeHandled,QueueType.ERROR,dpMessage.getXmlMessageId());
			} catch (MQException e) {
				log.error("MQ Exception : + writing message to ERROR Queue for message with id "+dpMessage.getXmlMessageId()+" msg: "+e.getMessage() );
			} catch (IOException e) {
				log.error("IO Exception : + writing message to ERROR Queue for message with id "+dpMessage.getXmlMessageId()+" msg: "+e.getMessage() );
			}
		}
		
	}

	private void writeAllMessagesInQueue(List<String> messagesToBeHandled , QueueType qtype, String msgIdWithProblem) throws MQException, IOException, JAXBException, XMLStreamException{
		
		for (int i = 0; i < messagesToBeHandled.size(); i++) {
			String message = messagesToBeHandled.get(i);
			DpMessage dpMessage = createDpMessage(message);
			if(dpMessage.getXmlMessageId().equalsIgnoreCase(msgIdWithProblem))
				dpMessageTool.putMessageInQueue(message, qtype);
			else
				dpMessageTool.putMessageInQueue(message, QueueType.NORMAL);
		}
	}
	
	private void closeConnection() {
		try {
			if (conn != null)
				conn.close();
		} catch (Exception e) {
			log.error("Exception during closing connection to db "
					+ e.getMessage());
		} finally {
			try {
				conn.close();
				log.debug("Closing connection to db");
			} catch (Exception e) {
			}
		}
	}
}
